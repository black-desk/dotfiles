snippet project "create a template CMakeLists.txt for project using PFL.cmake and CPM.cmake" b
cmake_minimum_required(VERSION 3.11.4) # for RHEL 8

# Let's place extra cmake scripts in /cmake directory
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Use this command to update PFL.cmake from GitHub release page:
# wget -O cmake/PFL.cmake https://github.com/black-desk/PFL.cmake/releases/latest/download/PFL.cmake
include(PFL)

set(ENABLE_CPM YES)
if(CMAKE_VERSION VERSION_LESS "3.14")
	set(ENABLE_CPM NO)
endif()

if(CPM_LOCAL_PACKAGES_ONLY)
	set(ENABLE_CPM NO)
endif()

macro cpm_add_dependencies()
	# Use CPMFindPackage from CPM.cmake add dependencies here, for example:
	# CPMFindPackage(
		# NAME             nlohmann_json
		# VERSION          3.5.0
		# URL              "https://github.com/nlohmann/json/archive/refs/tags/v3.5.0.tar.gz"
		# EXCLUDE_FROM_ALL ON
		# OPTIONS          "JSON_BuildTests OFF")
endmacro()

# Use this command to update CPM.cmake from GitHub release page:
# wget -O cmake/CPM.cmake https://github.com/cpm-cmake/CPM.cmake/releases/latest/download/CPM.cmake
if(NOT ENABLE_CPM)
	message(STATUS "CPM.cmake disabled.")
else()
	include(CPM)
	cpm_add_dependencies()
endif()

project(
	helloworld
	VERSION      0.1.0
	DESCRIPTION  "hello world"
	HOMEPAGE_URL "https://github.com/black-desk/helloworld"
	LANGUAGES    CXX)

# Use this command to update GitSemver.cmake from GitHub release page:
# wget -O cmake/GitSemver.cmake https://github.com/black-desk/GitSemver.cmake/releases/latest/download/GitSemver.cmake
include(GitSemver)
gitsemver(PROJECT_VERSION)

pfl_init()
endsnippet

snippet install_bin "" b
install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${1:path/to/your/executable} TYPE BIN)

endsnippet

snippet install_libexec "" b
install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${1:path/to/your/executable} DESTINATION ${CMAKE_INSTALL_LIBEXECDIR})

endsnippet

snippet SYSTEMD_SYSTEM_UNIT_DIR "" b
find_package(PkgConfig)
if(NOT SYSTEMD_SYSTEM_UNIT_DIR)
	if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.28")
		pkg_get_variable(SYSTEMD_SYSTEM_UNIT_DIR
				 systemd systemd_system_unit_dir
				 DEFINE_VARIABLES
					prefix=${CMAKE_INSTALL_PREFIX})
	else()
		pkg_get_variable(SYSTEMD_PREFIX systemd prefix)
		pkg_get_variable(SYSTEMD_SYSTEM_UNIT_DIR
				 systemd systemd_system_unit_dir)
		string(REPLACE "${SYSTEMD_PREFIX}" "${CMAKE_INSTALL_PREFIX}"
		       SYSTEMD_SYSTEM_UNIT_DIR "${SYSTEMD_SYSTEM_UNIT_DIR}")
	endif()
endif()
pkg_get_variable(SYSTEMD_SYSTEM_UNIT_PATH systemd systemd_system_unit_path)
if(NOT SYSTEMD_SYSTEM_UNIT_PATH MATCHES ".*:${SYSTEMD_SYSTEM_UNIT_DIR}:.*")
	message(WARNING SYSTEMD_SYSTEM_UNIT_DIR="${SYSTEMD_SYSTEM_UNIT_DIR}" is
			not in the system unit search path of
			current systemd installation)
endif()

endsnippet

snippet install_systemd_system_unit "" b
install(FILES ${1:path/to/your.service}
        DESTINATION ${SYSTEMD_SYSTEM_UNIT_DIR})

endsnippet

snippet SYSTEMD_USER_UNIT_DIR "" b
find_package(PkgConfig)
if(NOT SYSTEMD_USER_UNIT_DIR)
	if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.28") 
		pkg_get_variable(SYSTEMD_USER_UNIT_DIR
				 systemd systemd_user_unit_dir
				 DEFINE_VARIABLES
					prefix=${CMAKE_INSTALL_PREFIX})
	else()
		pkg_get_variable(SYSTEMD_PREFIX systemd prefix)
		pkg_get_variable(SYSTEMD_USER_UNIT_DIR
				 systemd systemd_user_unit_dir)
		string(REPLACE "${SYSTEMD_PREFIX}" "${CMAKE_INSTALL_PREFIX}"
		       SYSTEMD_USER_UNIT_DIR "${SYSTEMD_USER_UNIT_DIR}")
	endif()
endif()
pkg_get_variable(SYSTEMD_USER_UNIT_PATH systemd systemd_user_unit_path)
if(NOT SYSTEMD_USER_UNIT_PATH MATCHES ".*:${SYSTEMD_USER_UNIT_DIR}:.*")
	message(WARNING SYSTEMD_USER_UNIT_DIR="${SYSTEMD_USER_UNIT_DIR}" is not
			in the user unit search path of
			current systemd installation)
endif()

endsnippet

snippet install_systemd_user_unit "" b
install(FILES ${1:path/to/your.service}
        DESTINATION ${SYSTEMD_USER_UNIT_DIR})
endsnippet

snippet template_Findnlohmann_json "" b
try_compile(
  nlohmann_json_FOUND ${CMAKE_CURRENT_BINARY_DIR}/nlohmann_json_compile_test
  ${CMAKE_CURRENT_LIST_DIR}/nlohmann_json_compile_test.cpp)

if(NOT nlohmann_json_FOUND)
  return()
endif()

if(NOT TARGET nlohmann_json::nlohmann_json)
  add_library(nlohmann_json INTERFACE)
  add_library(nlohmann_json::nlohmann_json ALIAS nlohmann_json)
  install(TARGETS nlohmann_json EXPORT "${PROJECT_NAME}")
endif()
endsnippet


snippet CPMFindPackage_tl-expected "" b
CPMFindPackage(
  NAME tl-expected
  VERSION 1.0.0
  GITHUB_REPOSITORY TartanLlama/expected
  GIT_TAG v1.1.0
  EXCLUDE_FROM_ALL ON
  OPTIONS "EXPECTED_BUILD_TESTS OFF")
if(NOT TARGET tl::expected)
  add_library(tl::expected ALIAS tl-expected)
endif()
endsnippet

snippet CPMFindPackage_Catch2 "" b
CPMAddPackage(
  NAME Catch2
  GITHUB_REPOSITORY catchorg/Catch2
  GIT_TAG v3.4.0
  VERSION 3.4.0)
list(APPEND CMAKE_MODULE_PATH ${Catch2_SOURCE_DIR}/extras)
endsnippet

snippet CPMFindPackage_nlohmann_json "" b
CPMFindPackage(
  NAME nlohmann_json
  VERSION 3.5.0
  URL "https://github.com/nlohmann/json/archive/refs/tags/v3.5.0.tar.gz"
  EXCLUDE_FROM_ALL ON
  OPTIONS "JSON_BuildTests OFF")
endsnippet

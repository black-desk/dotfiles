snippet template_print-variable.make "" b
#!/usr/bin/env -S make -f

# print-variable.make
#
# Print the value of a variable in a Makefile.
# This will execute some commands in the input Makefile, so be careful.
#
# Usage:
#   print-variable.make INPUT=/path/to/Makefile VARIABLE_NAME

% : ; @echo $($*)

include $(INPUT)

endsnippet

snippet # "" b
DESTDIR ?=

prefix      ?= /usr/local
bindir      ?= $(prefix)/bin
libdir      ?= $(prefix)/lib
libexecdir  ?= $(prefix)/libexec
datarootdir ?= $(prefix)/share

INSTALL         ?= install
INSTALL_PROGRAM ?= $(INSTALL)
INSTALL_DATA    ?= $(INSTALL) -m 644

SHELL = sh

endsnippet

snippet install_bin "" b
.PHONY: install-bin
install-bin:
	$(INSTALL) -d "$(DESTDIR)$(bindir)"
	$(INSTALL_PROGRAM) ${1:path/to/your/executable} "$(DESTDIR)$(bindir)"/${2:executable}

endsnippet

snippet install_data "" b
.PHONY: install-data
install-data:
	$(INSTALL) -d "$(DESTDIR)$(datarootdir)"
	$(INSTALL_DATA) ${1:path/to/your/data} "$(DESTDIR)$(datarootdir)"/${2:data}

endsnippet

snippet install_libexec "" b
.PHONY: install-libexec
install-libexec:
	$(INSTALL) -d "$(DESTDIR)$(libexecdir)"
	$(INSTALL_PROGRAM) ${1:path/to/your/internal/executable} "$(DESTDIR)$(libexecdir)"/${2:executable}

endsnippet

snippet install_static_library "" b
.PHONY: install-static-library
install-static-library:
	$(INSTALL) -d "$(DESTDIR)$(libdir)"
	$(INSTALL_DATA) ${1:path/to/your.a} "$(DESTDIR)$(libdir)"/${2:your.a}

endsnippet

snippet install_pkg_config "" b
pc_dir ?= $(libdir)/pkgconfig
ifeq ($(findstring $(pc_dir), $(subst :, , $(shell \
	$(PKG_CONFIG) --variable=pc_path)), )
$(warning pc_dir="$(pc_dir)" \
	is not in the search path of current pkg-config installation)
endif

.PHONY: install-pkg-config
install-pkg-config:
	$(INSTALL) -d "$(DESTDIR)$(pc_dir)"
	$(INSTALL_DATA) ${1:path/to/your.pc} "$(DESTDIR)$(pc_dir)"/${2:your.pc}
endsnippet

snippet install_systemd_system_unit "" b
systemd_system_unit_dir ?= $(shell \
	$(PKG_CONFIG) --define-variable=prefix=$(prefix) \
	systemd --variable=systemd_system_unit_dir)
ifeq ($(findstring $(systemd_system_unit_dir), $(subst :, , $(shell \
	$(PKG_CONFIG) systemd --variable=systemd_system_unit_path))), )
$(warning systemd_system_unit_dir="$(systemd_system_unit_dir)" \
	is not in the system unit search path of current systemd installation)
endif

.PHONY: install-systemd-system-unit
install-systemd-system-unit:
	$(INSTALL) -d "$(DESTDIR)$(systemd_system_unit_dir)"
	$(INSTALL_DATA) ${1:path/to/your.service} "$(DESTDIR)$(systemd_system_unit_dir)"/${2:your.service}
endsnippet

snippet install_systemd_user_unit "" b
systemd_user_unit_dir ?= $(shell \
	$(PKG_CONFIG) --define-variable=prefix=$(prefix) \
	systemd --variable=systemd_user_unit_dir)
ifeq ($(findstring $(systemd_user_unit_dir), $(subst :, , $(shell \
	$(PKG_CONFIG) systemd --variable=systemd_user_unit_path))), )
$(warning systemd_user_unit_dir="$(systemd_user_unit_dir)" \
	is not in the user unit search path of current systemd installation)
endif

.PHONY: install-systemd-user-unit
install-systemd-user-unit:
	$(INSTALL) -d "$(DESTDIR)$(systemd_user_unit_dir)"
	$(INSTALL_DATA) ${1:path/to/your.service} "$(DESTDIR)$(systemd_user_unit_dir)"/${2:your.service}
endsnippet

snippet GO "" b
# Go variables
GO ?= $(shell goenv which go 2>/dev/null || command -v go)
GOTAGS ?=
_GO_TAGS =
GO_LDFLAGS ?=
_GO_LDFLAGS =
GO_MAIN_PACKAGE_DIR = ./cmd/$1


endsnippet

snippet PROJECT_VERSION "" b
# Project version variables
# NOTE:
# These version variable initialization assumes that
# you are using POSIX compatible SHELL.
PROJECT_VERSION = ${1:0.1.0}
PROJECT_GIT_DESCRIBE = $(shell git describe --tags --match v* --long --dirty)
PROJECT_SEMVER_GENERATED_FROM_GIT_DESCRIBE = $(shell \
	printf '%s\n' "$(PROJECT_GIT_DESCRIBE)" | \
	sed \
		-e 's/-\([[:digit:]]\+\)-g/+\1\./' \
		-e 's/-dirty$$/\.dirty/' \
		-e 's/+0\.[^\.]\+\.\?/+/' \
		-e 's/^v//' \
		-e 's/+$$//' \
)


endsnippet

snippet GO_VERSION_PACKAGE "" b
# Integrate version string into golang -ldflags
GO_VERSION_PACKAGE = $1
_GO_LDFLAGS += -X '$(GO_VERSION_PACKAGE).${2:Version}=v$(PROJECT_SEMVER_GENERATED_FROM_GIT_DESCRIBE)'
_GO_LDFLAGS += -X '$(GO_VERSION_PACKAGE).${3:GitDescription}=$(PROJECT_GIT_DESCRIBE)'


endsnippet

snippet all:(golang) "" b
.PHONY: all
all:
	$(GO) build -v \
		-ldflags "$(_GO_LDFLAGS) $(GO_LDFLAGS)" \
		-tags="$(_GO_TAGS),$(GO_TAGS)" \
		$(GO_MAIN_PACKAGE_DIR)


endsnippet

snippet generate:(golang) "" b
# \`go generate\` target
.PHONY: generate
generate:
	# NOTE:
	# Many developer write generate comamnds like
	# go run -mod=mod example.com/path/to/package
	# which is not working when go workspace is set and 
	# update go.mod file.
	# So we need to disable workspace
	# and run go mod tidy after generate.
	env GOWORK=off $(GO) generate -v -x ./...
	$(GO) mod tidy


endsnippet

snippet test:(golang) "" b
GO_COVERAGE_OUTPUT ?= ${1:coverage.out}
GO_COVERAGE_REPORT ?= ${2:coverage_report.txt}
.PHONY: test
test:
	# NOTE:
	# Build tests but not run them.
	# Then you can run them without internet access.
	# The __SHOULD_NEVER_MATCH__ idea comes from
	# https://stackoverflow.com/a/72722257/13206417
	$(GO) test ./... \
		-ldflags "$(_GO_LDFLAGS) $(GO_LDFLAGS)" \
		-tags="$(_GO_TAGS),$(GO_TAGS)" \
		-run=__SHOULD_NEVER_MATCH__

	mkdir -p -- $(shell dirname -- "$(GO_COVERAGE_OUTPUT)")

	$(GO) test ./... -v \
		-coverprofile="$(GO_COVERAGE_OUTPUT)" \
		-ldflags "$(_GO_LDFLAGS) $(GO_LDFLAGS)" \
		-tags="$(_GO_TAGS),$(GO_TAGS)"

.PHONY: test-coverage-report
test-coverage-report:
	go tool cover -func=$(GO_COVERAGE_OUTPUT) -o=$(GO_COVERAGE_REPORT)


endsnippet

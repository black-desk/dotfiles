snippet check_root "check if running as root" b
if [ "$EUID" -ne 0 ]
	then echo "Please run as root"
	exit
fi


endsnippet

snippet # "start a new shell script" b
#!/usr/bin/env $1
# NOTE:
# Use /usr/bin/env to find shell interpreter for better portability.
# Reference: https://en.wikipedia.org/wiki/Shebang_%28Unix%29#Portability

# NOTE:
# Exit immediately if any commands (even in pipeline)
# exits with a non-zero status.
set -e
set -o pipefail


endsnippet

snippet CURRENT_SOURCE_FILE_PATH "get current source file path" b
# WARNING:
# This is not reliable when using POSIX sh
# and current script file is sourced by \`source\` or \`.\`
CURRENT_SOURCE_FILE_PATH="${BASH_SOURCE[0]:-\$0}"


endsnippet

snippet get_absolute_path_function "a function to generate absolute path from likely relative path argument" b
# This function generates an absolute path from a likely relative path argument.
# Arguments:
#   \$1 - The file path which can be relative or absolute.
# Returns:
#   The absolute path of the given file path.
function get_absolute_path() {
	FILE_PATH="\$1"
	if [ -n "${FILE_PATH%%/*}" ]; then
		FILE_PATH="$PWD/$FILE_PATH"
	fi
	echo "$FILE_PATH"
}


endsnippet

snippet get_absolute_path "generate absolute path from a likely relative path" b
# Make $1 an absolute path.
if [ -n "${$1%%/*}" ]; then
	$1="$PWD/$$1"
fi
endsnippet

snippet CURRENT_SOURCE_FILE_DIR "get current source file directory" b
CURRENT_SOURCE_FILE_DIR="$(dirname -- "$CURRENT_SOURCE_FILE_PATH")"


endsnippet

snippet CURRENT_SOURCE_FILE_NAME "get current source file name" b
CURRENT_SOURCE_FILE_NAME="$(basename -- "$CURRENT_SOURCE_FILE_PATH")"


endsnippet

snippet download_latest_github_release "download latest release from GitHub repository" b
function download_latest_github_release() {
	REPOSITORY="\$1"
	ASSET="\$2"
	SAVE_AS="\$3"

	URL="https://github.com/$REPOSITORY/releases/latest/download/$ASSET"

	mkdir -p "$(dirname -- "$SAVE_AS")"

	if command -v curl &>/dev/null; then
		curl -L "$URL" -o "$SAVE_AS"
		return
	fi

	if command -v wget &>/dev/null; then
		wget "$URL" -O "$SAVE_AS"
		return
	fi

	exit 1
}


endsnippet

snippet check_CI "check if running in CI environment" b
# NOTE:
# GitHub actions sets CI environment variable.
# Reference: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables
if [ -z "$CI" ]; then
	echo "WARNING: This script is meant to be run in CI environment." >&2
fi


endsnippet

snippet build_cmake_project "xxx" b
# This function builds a CMake project.
# Arguments:
#   \$1 - The source directory of the project.
#   \$2 - The directory where the build will take place.
#   $@ - Additional arguments to pass to the cmake command.
function build_cmake_project() {
	configure_cmake_project "$@"

	shift
	local project_binary_dir
	project_binary_dir="\$1"
	# Make project_binary_dir an absolute path.
	if [ -n "${project_binary_dir%%/*}" ]; then
		project_binary_dir="$PWD/$project_binary_dir"
	fi
	shift

	# NOTE:
	# Do not use pushd and popd here for POSIX sh compliance.
	local old_pwd
	old_pwd="$PWD"
	cd "$project_binary_dir"
	cmake --build .
	cd "$old_pwd"
}
endsnippet

snippet configure_cmake_project "configure a CMake project" b
# This function configures a CMake project by setting up the necessary directories
# and running the CMake command with the appropriate arguments.
#
# Arguments:
#   \$1 - The source directory of the project.
#   \$2 - The directory where the build will take place.
#   $@ - Additional arguments to pass to the cmake command.
function configure_cmake_project() {
	# NOTE:
	# Do not use cmake -S and -B options for better compatibility.
	local project_source_dir
	project_source_dir="\$1"
	# Make project_source_dir an absolute path.
	if [ -n "${project_source_dir%%/*}" ]; then
		project_source_dir="$PWD/$project_source_dir"
	fi
	shift

	local project_binary_dir
	project_binary_dir="\$1"
	# Make project_binary_dir an absolute path.
	if [ -n "${project_binary_dir%%/*}" ]; then
		project_binary_dir="$PWD/$project_binary_dir"
	fi
	shift

	mkdir -p "$project_binary_dir"
	# NOTE:
	# Do not use pushd and popd here for POSIX sh compliance.
	local old_pwd
	old_pwd="$PWD"
	cd "$project_binary_dir"
	cmake "$project_source_dir" "$@"
	cd "$old_pwd"
}


endsnippet

snippet get_github_latest_release_tag "configure a CMake project" b
# Function to get the latest release tag of a GitHub repository.
# Arguments:
#   \$1: The GitHub repository in the format "owner/repo".
function get_github_latest_release_tag() {
	local repo
	repo="\$1"

	if command -v gh &>/dev/null; then
		gh release view -R "${repo}" --json tagName -q .tagName
		return
	fi

	function get_tag_name() {
		if command -v jq &>/dev/null; then
			jq -r .tag_name
			return
		fi

		echo "\\\`jq\\\` is missing, fallback to use grep to get tag_name in json" >&2

		grep -oP '"tag_name": "\K(.*)(?=")'
	}

	if command -v curl &>/dev/null; then
		curl -sL https://api.github.com/repos/"${repo}"/releases/latest |
			get_tag_name
		return
	fi

	if command -v wget &>/dev/null; then
		wget -qO- https://api.github.com/repos/"${repo}"/releases/latest |
			get_tag_name
		return
	fi

	echo "One of the following commands is required: gh, curl, wget" >&2
	false
}


endsnippet

snippet options "parse command line options" b
# shellcheck disable=SC2016
USAGE="$CURRENT_SOURCE_FILE_NAME"'


'"
Usage:
  $CURRENT_SOURCE_FILE_NAME -h
  $CURRENT_SOURCE_FILE_NAME

Options:
  -h	Show this screen."

while getopts ':h' option; do
	case "$option" in
	h)
		echo "$USAGE"
		exit
		;;
	\?)
		printf "$CURRENT_SOURCE_FILE_NAME: Unknown option: -%s\n\n" "$OPTARG" >&2
		echo "$USAGE" >&2
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))


endsnippet

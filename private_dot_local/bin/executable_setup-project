#!/usr/bin/env bash

if [[ $SCRIPT_DEBUG ]]; then
	set -x
fi

function check_command() {
	command -v "$1" &>/dev/null || {
		echo "need $1"
		exit 255
	}
}

function setup() {
	if [[ -z "${VALGIRND}" ]]; then
		check_command clang
		CC="${CC:=clang}"
		export CC

		check_command clang++
		CXX="${CXX:=clang++}"
		export CXX
	fi

	export CFLAGS="-Wall -Wextra -Wpedantic -Wno-extra-semi $CFLAGS"
	export CFLAGS="-fno-omit-frame-pointer -fno-optimize-sibling-calls $CFLAGS"

	if [[ "$CXX" == "clang++" && "$CC" == "clang" ]]; then
		export CFLAGS="-Wno-unused-command-line-argument -Wno-gnu-zero-variadic-macro-arguments $CFLAGS"
	fi

	export CXXFLAGS="$CFLAGS"

	if [[ -f ../meson.build ]]; then
		check_command meson

		# NOTE: meson will auto detect if ccache is available or not.
		check_command ccache

		check_command mold
		export CC_LD=mold
		export CXX_LD=mold

		meson setup . .. || exit 255
		meson compile || exit 255

	elif [[ -f ../CMakeLists.txt ]]; then
		check_command cmake

		check_command mold
		export CFLAGS="$CFLAGS -fuse-ld=mold"
		export CXXFLAGS="$CXXFLAGS -fuse-ld=mold"

		export CMAKE_EXPORT_COMPILE_COMMANDS=ON

		CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX:=/usr/local}

		check_command ccache
		cmake -S .. -B . --fresh \
			-G "Ninja Multi-Config" \
			-DFETCHCONTENT_QUIET=OFF \
			-DCMAKE_INSTALL_SYSCONFDIR=/etc \
			-DCMAKE_CXX_COMPILER_LAUNCHER="ccache" \
			-DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" \
			-DCMAKE_COLOR_DIAGNOSTICS=1 ||
			exit 255
		cmake --build . || exit 255
		ln -f -s "$BUILD_ROOT"/compile_commands.json ../compile_commands.json
		if [ -n "${TEST}" ] && cmake --build . --target help | grep "test: phony" -q; then
			export CTEST_OUTPUT_ON_FAILURE=1
			export GTEST_COLOR=1
			export ASAN_OPTIONS=color=always
			if [[ -z "${VALGIRND}" ]]; then
				cmake --build . -t test || exit 255
			else
				ctest -DCTEST_MEMORYCHECK_COMMAND="valgrind" -T memcheck --test-dir . || exit 255
			fi
		fi

	else
		check_command make

		check_command mold
		export CFLAGS="$CFLAGS -fuse-ld=mold"
		export CXXFLAGS="$CXXFLAGS -fuse-ld=mold"

		pushd .. || exit 255

		check_command ccache

		export CC="ccache $CC"
		export CXX="ccache $CXX"

		if [[ -f autogen.sh ]]; then
			./autogen.sh || exit 255
		fi

		if [[ -f configure ]]; then
			./configure
		fi

		cores=$(nproc)
		cores=$(("$cores" - 1))

		if [[ -f GNUmakefile ]] ||
			[[ -f makefile ]] ||
			[[ -f Makefile ]]; then

			make clean

			check_command bear
			bear -- make -j $cores
		fi

		popd || exit 255
	fi
}

PROJECT_ROOT=$(realpath .)

if [[ -n $1 ]]; then
	PROJECT_ROOT=$(realpath "$1")
fi

BUILD_ROOT=build

if [[ -n $2 ]]; then
	BUILD_ROOT=$2
fi

mkdir -p "$BUILD_ROOT"

BUILD_ROOT=$(realpath "$BUILD_ROOT")

echo project: "$PROJECT_ROOT"
echo build: "$BUILD_ROOT"

pushd "$PROJECT_ROOT" || exit 255

workspace=$(realpath ~/workspace)

if [[ $PROJECT_ROOT == $workspace* ]]; then
	repo=${PROJECT_ROOT#"$workspace"}
	if [[ -f ~/.local/share/vimrcs/"$repo"/.vimrc ]]; then
		ln -s ~/.local/share/vimrcs/"$repo"/.vimrc .
	fi
fi

if [[ -d ./.git ]]; then
	retry -t 5 -- git submodule update --init --recursive
fi

pushd "$BUILD_ROOT" || exit 255
setup || exit 255
popd || exit 255
popd || exit 255

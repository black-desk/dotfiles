#!/usr/bin/env bash

if [[ $SCRIPT_DEBUG ]]; then
	set -x
fi

function setup() {

	command -v clang++ && command -v clang || (
		echo "need clang and clang++"
		exit 255
	)

	export CC="clang"
	export CXX="clang++"

	command -v mold || (
		echo "need mold"
		exit 255
	)

	export CC_LD="mold"
	export CXX_LD="$CC_LD"

	export CMAKE_C_FLAGS="-fuse-ld=$CC_LD"
	export CMAKE_CXX_FLAGS="-fuse-ld=$CC_LD"

	export CFLAGS="-Wall -Wextra -fsanitize=undefined $CFLAGS"
	export CXXFLAGS="$CFLAGS"

	command -v ccache || (
		echo "need ccache"
		exit 255
	)

        command -v clang-tidy || (
                echo "need clang-tidy"
		exit 255
        )

	if [[ -f ../meson.build ]]; then
		if [[ ! -f ../.clang-tidy ]]; then
			touch ../.clang-tidy
		fi

		export CC="ccahce $CC"
		export CXX="ccahce $CXX"

		command -v meson || (
			echo "need meson"
			exit 255
		)

		meson setup . .. || exit 255
		meson compile || exit 255
	elif [[ -f ../CMakeLists.txt ]]; then
		command -v cmake || (
			echo "need cmake"
			exit 255
		)

		cmake .. --fresh -DCMAKE_GENERATOR=Ninja \
			-DCMAKE_C_COMPILER_LAUNCHER="ccache" \
			-DCMAKE_CXX_COMPILER_LAUNCHER="ccache" \
			-DCMAKE_BUILD_TYPE=Debug \
			-DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
			-DCMAKE_INSTALL_SYSCONFDIR=/etc \
			-DCMAKE_CXX_CLANG_TIDY=clang-tidy ||
			exit 255
		cmake --build . || exit 255
	else
		command -v make || (
			echo "need make"
			exit 255
		)
		export CC="ccahce $CC"
		export CXX="ccahce $CXX"
		if [[ -f ../autogen.sh ]]; then
			pushd ..
			./autogen.sh || exit 255
			popd || exit 255
		fi

		if [[ -f ../configure ]]; then
			../configure
		fi

		cores=$(nproc)
		cores=$(("$cores" - 1))

		if [[ -f GNUmakefile ]] ||
			[[ -f makefile ]] ||
			[[ -f Makefile ]]; then

			make clean
			bear -- make -j $cores
		fi
	fi
}

PROJECT_ROOT=$(realpath .)

if [[ -n $1 ]]; then
	PROJECT_ROOT=$(realpath "$1")
fi

BUILD_ROOT=build

if [[ -n $2 ]]; then
	BUILD_ROOT=$2
fi

mkdir -p "$BUILD_ROOT"

BUILD_ROOT=$(realpath "$BUILD_ROOT")

echo project dir : "$PROJECT_ROOT"
echo build dir : "$BUILD_ROOT"

pushd "$PROJECT_ROOT" || exit 255

workspace=$(realpath ~/workspace)

if [[ $PROJECT_ROOT == $workspace* ]]; then
	repo=${PROJECT_ROOT#"$workspace"}
	if [[ -f ~/.local/share/vimrcs/"$repo"/.vimrc ]]; then
		ln -s ~/.local/share/vimrcs/"$repo"/.vimrc .
	fi
fi

if [[ -d ./.git ]]; then
	retry -t 5 -- git submodule update --init --recursive
fi

pushd "$BUILD_ROOT" || exit 255
setup
popd || exit 255
popd || exit 255

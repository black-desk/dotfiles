#!/usr/bin/env bash

if [[ $SCRIPT_DEBUG ]]; then
	set -x
fi

function check_command() {
	command -v "$1" &>/dev/null || {
		echo "need $1"
		exit 255
	}
}

function setup() {
	check_command clang

	export CC="clang"

	check_command clang++

	export CXX="clang++"

	export CFLAGS="$CFLAGS -Wall"
	export CFLAGS="$CFLAGS -Wextra"
	export CFLAGS="$CFLAGS -Wno-unused-command-line-argument"
	export CFLAGS="$CFLAGS -fsanitize=undefined"

	export CXXFLAGS="$CFLAGS"

	check_command clang-tidy

	if [[ -f ../meson.build ]]; then
		if [[ ! -f ../.clang-tidy ]]; then
			touch ../.clang-tidy
		fi

		check_command meson

		meson setup . .. || exit 255
		meson compile || exit 255

	elif [[ -f ../CMakeLists.txt ]]; then
		check_command cmake
		check_command mold

		export CFLAGS="$CFLAGS -fuse-ld=mold"
		export CXXFLAGS="$CXXFLAGS -fuse-ld=mold"

		check_command ccache

		cmake -S .. -B . --fresh \
			-DCMAKE_GENERATOR="Ninja Multi-Config" \
			-DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
			-DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
			-DFETCHCONTENT_QUIET=OFF \
			-DCMAKE_INSTALL_SYSCONFDIR=/etc \
			-DCMAKE_COLOR_DIAGNOSTICS=1 \
			-DCMAKE_CXX_CLANG_TIDY=clang-tidy ||
			exit 255
		cmake --build . || exit 255

	else
		check_command make
		check_command bear

		if [[ -f ../autogen.sh ]]; then
			pushd ..
			./autogen.sh || exit 255
			popd || exit 255
		fi

		if [[ -f ../configure ]]; then
			../configure
		fi

		cores=$(nproc)
		cores=$(("$cores" - 1))

		if [[ -f GNUmakefile ]] ||
			[[ -f makefile ]] ||
			[[ -f Makefile ]]; then

			make clean
			bear -- make -j $cores
		fi
	fi
}

PROJECT_ROOT=$(realpath .)

if [[ -n $1 ]]; then
	PROJECT_ROOT=$(realpath "$1")
fi

BUILD_ROOT=build

if [[ -n $2 ]]; then
	BUILD_ROOT=$2
fi

mkdir -p "$BUILD_ROOT"

BUILD_ROOT=$(realpath "$BUILD_ROOT")

echo project: "$PROJECT_ROOT"
echo build: "$BUILD_ROOT"

pushd "$PROJECT_ROOT" || exit 255

workspace=$(realpath ~/workspace)

if [[ $PROJECT_ROOT == $workspace* ]]; then
	repo=${PROJECT_ROOT#"$workspace"}
	if [[ -f ~/.local/share/vimrcs/"$repo"/.vimrc ]]; then
		ln -s ~/.local/share/vimrcs/"$repo"/.vimrc .
	fi
fi

if [[ -d ./.git ]]; then
	retry -t 5 -- git submodule update --init --recursive
fi

pushd "$BUILD_ROOT" || exit 255
setup || exit 255
popd || exit 255
popd || exit 255

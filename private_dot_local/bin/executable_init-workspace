#!/bin/env bash

pushd() {
	command pushd "$@" >/dev/null || exit
}

popd() {
	command popd >/dev/null || exit
}

echo "Parsing json..."

json=$(cat "$HOME"/.config/workspace.json)

cmds=$(
	echo "$json" | jq -r '
                paths as $path |
                select(getpath($path).eval?) |
                "jq \".\( $path | join(".") )=$(\(getpath($path).eval))\""
        '
)

readarray -t evals <<<"$cmds"

for cmd in "${evals[@]}"; do
	json=$(echo "$json" | eval "$cmd")
done

echo "Parsing json... done"

root="$(echo "$json" | jq -r ".root")"

echo "Workspace root: $root"

mkdir -p "$root"

pushd "$root" || exit

readarray -t components <<<"$(echo "$json" | jq -r '.components[]')"

if [[ $# -ne 0 ]]; then
	components=("$@")
fi

echo "Enabled components:"
echo "${components[@]}"

filter_out() {
	for component in "${components[@]}"; do
		if [[ "$1" = *"$component"* ]]; then
			return 255
		fi
	done
	return 0
}

echo "Cloning repo using github-cli..."

echo "$json" | jq -r '
        paths as $path |
        select(getpath($path).github?) |
        [ ($path[0:-1] | join ("/") ), getpath($path).github ] |
        @tsv
' | while IFS=$'\t' read -r dir repo; do
	if filter_out "$dir"; then
		continue
	fi

	mkdir -p "$dir"
	pushd "$dir" || exit
	dir=${repo##*/}
	git -C "$dir" rev-parse &>/dev/null ||
		retry -t 5 -- gh repo clone "$repo" -- --recurse-submodules
	popd || exit
done

echo "Cloning repo using github-cli... done"

echo "Cloning repo using git..."

echo "$json" | jq -r '
        paths as $path |
        select(getpath($path).url?) |
        select( $path | any(.=="remote") | not ) |
        [ ($path[0:-1] | join ("/") ), getpath($path).url ] |
        @tsv
' | while IFS=$'\t' read -r dir url; do
	if filter_out "$dir"; then
		continue
	fi

	mkdir -p "$dir"
	pushd "$dir" || exit
	dir=${url%.git}
	dir=${dir##*/}
	git -C "$dir" rev-parse &>/dev/null ||
		retry -t 5 -- git clone "$url" --recurse-submodules
	popd || exit
done

echo "Cloning repo using git... done"

echo "Setup remotes..."

echo "$json" | jq -r '
        paths as $path |
        select(getpath($path).url?) |
        select( $path | any(.=="remote") ) | [
                ($path[0:-3] | join ("/") ),
                getpath($path[0:-2]).url,
                getpath($path[0:-2]).github,
                getpath($path).name,
                getpath($path).url
        ] | @tsv
' | while IFS=$'\t' read -r dir main name url; do
	if filter_out "$dir"; then
		continue
	fi

	main=${main%.git}
	main=${main##*/}
	mkdir -p "$dir/$main"
	pushd "$dir/$main" || exit
	git remote | grep "$name" &>/dev/null ||
		git remote add "$name" "$url"
	retry -t 5 -- git fetch "$name"
	popd || exit
done

echo "Setup remotes... done"

echo "Setup worktrees..."

echo "$json" | jq -r '
        paths as $path |
        select(getpath($path).worktrees?) | 
        getpath($path) as $repo |
        getpath($path).worktrees[] | [
                ( $path[0:-1] | join("/") ),
                $repo.url,
                .branch,
                .reference
        ] | @tsv
' | while IFS=$'\t' read -r dir main branch reference; do
	if filter_out "$dir"; then
		continue
	fi

	main=${main%.git}
	main=${main##*/}
	mkdir -p "$dir/$main/.worktrees"
	pushd "$dir/$main/.worktrees" || exit
	git worktree list | grep "$branch" &>/dev/null ||
		git worktree add "$branch" "$reference" -b "$branch"
	popd || exit
done

echo "Setup worktrees... done"

popd || exit
